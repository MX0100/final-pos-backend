/* tslint:disable */
/* eslint-disable */
/**
 * Final POS API
 * REST API for products and shopping carts with partial success support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DeleteResponseDto } from '../models';
// @ts-ignore
import type { UpdateCartItemDto } from '../models';
// @ts-ignore
import type { UpdateCartResponseDto } from '../models';
// @ts-ignore
import type { UpdateQuantityDto } from '../models';
/**
 * CartsApi - axios parameter creator
 * @export
 */
export const CartsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add items to cart. If item already exists, quantity will be added to existing quantity.
         * @summary Add items to cart (incremental)
         * @param {string} cartId 
         * @param {UpdateCartItemDto} updateCartItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartsControllerAddItemsToCartV1: async (cartId: string, updateCartItemDto: UpdateCartItemDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('cartsControllerAddItemsToCartV1', 'cartId', cartId)
            // verify required parameter 'updateCartItemDto' is not null or undefined
            assertParamExists('cartsControllerAddItemsToCartV1', 'updateCartItemDto', updateCartItemDto)
            const localVarPath = `/api/v1/carts/{cartId}/items`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCartItemDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new shopping cart with default expiry time
         * @summary Create a new cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartsControllerCreateCartV1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/carts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete cart and release all reserved stock
         * @summary Delete cart
         * @param {string} cartId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartsControllerDeleteCartV1: async (cartId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('cartsControllerDeleteCartV1', 'cartId', cartId)
            const localVarPath = `/api/v1/carts/{cartId}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get cart details including items and status
         * @summary Get cart by ID
         * @param {string} cartId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartsControllerGetCartV1: async (cartId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('cartsControllerGetCartV1', 'cartId', cartId)
            const localVarPath = `/api/v1/carts/{cartId}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set cart items to exact quantities. This will overwrite existing cart contents.
         * @summary Update cart items (overwrite)
         * @param {string} cartId 
         * @param {UpdateCartItemDto} updateCartItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartsControllerUpdateCartItemsV1: async (cartId: string, updateCartItemDto: UpdateCartItemDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('cartsControllerUpdateCartItemsV1', 'cartId', cartId)
            // verify required parameter 'updateCartItemDto' is not null or undefined
            assertParamExists('cartsControllerUpdateCartItemsV1', 'updateCartItemDto', updateCartItemDto)
            const localVarPath = `/api/v1/carts/{cartId}/items`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCartItemDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update quantity of a specific item in cart
         * @summary Update item quantity
         * @param {string} cartId 
         * @param {string} productId 
         * @param {UpdateQuantityDto} updateQuantityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartsControllerUpdateItemQuantityV1: async (cartId: string, productId: string, updateQuantityDto: UpdateQuantityDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('cartsControllerUpdateItemQuantityV1', 'cartId', cartId)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('cartsControllerUpdateItemQuantityV1', 'productId', productId)
            // verify required parameter 'updateQuantityDto' is not null or undefined
            assertParamExists('cartsControllerUpdateItemQuantityV1', 'updateQuantityDto', updateQuantityDto)
            const localVarPath = `/api/v1/carts/{cartId}/items/{productId}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)))
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateQuantityDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsApi - functional programming interface
 * @export
 */
export const CartsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add items to cart. If item already exists, quantity will be added to existing quantity.
         * @summary Add items to cart (incremental)
         * @param {string} cartId 
         * @param {UpdateCartItemDto} updateCartItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartsControllerAddItemsToCartV1(cartId: string, updateCartItemDto: UpdateCartItemDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateCartResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartsControllerAddItemsToCartV1(cartId, updateCartItemDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartsApi.cartsControllerAddItemsToCartV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new shopping cart with default expiry time
         * @summary Create a new cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartsControllerCreateCartV1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateCartResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartsControllerCreateCartV1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartsApi.cartsControllerCreateCartV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete cart and release all reserved stock
         * @summary Delete cart
         * @param {string} cartId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartsControllerDeleteCartV1(cartId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartsControllerDeleteCartV1(cartId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartsApi.cartsControllerDeleteCartV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get cart details including items and status
         * @summary Get cart by ID
         * @param {string} cartId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartsControllerGetCartV1(cartId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateCartResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartsControllerGetCartV1(cartId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartsApi.cartsControllerGetCartV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Set cart items to exact quantities. This will overwrite existing cart contents.
         * @summary Update cart items (overwrite)
         * @param {string} cartId 
         * @param {UpdateCartItemDto} updateCartItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartsControllerUpdateCartItemsV1(cartId: string, updateCartItemDto: UpdateCartItemDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateCartResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartsControllerUpdateCartItemsV1(cartId, updateCartItemDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartsApi.cartsControllerUpdateCartItemsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update quantity of a specific item in cart
         * @summary Update item quantity
         * @param {string} cartId 
         * @param {string} productId 
         * @param {UpdateQuantityDto} updateQuantityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartsControllerUpdateItemQuantityV1(cartId: string, productId: string, updateQuantityDto: UpdateQuantityDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateCartResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartsControllerUpdateItemQuantityV1(cartId, productId, updateQuantityDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartsApi.cartsControllerUpdateItemQuantityV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CartsApi - factory interface
 * @export
 */
export const CartsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsApiFp(configuration)
    return {
        /**
         * Add items to cart. If item already exists, quantity will be added to existing quantity.
         * @summary Add items to cart (incremental)
         * @param {CartsApiCartsControllerAddItemsToCartV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartsControllerAddItemsToCartV1(requestParameters: CartsApiCartsControllerAddItemsToCartV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UpdateCartResponseDto> {
            return localVarFp.cartsControllerAddItemsToCartV1(requestParameters.cartId, requestParameters.updateCartItemDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new shopping cart with default expiry time
         * @summary Create a new cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartsControllerCreateCartV1(options?: RawAxiosRequestConfig): AxiosPromise<UpdateCartResponseDto> {
            return localVarFp.cartsControllerCreateCartV1(options).then((request) => request(axios, basePath));
        },
        /**
         * Delete cart and release all reserved stock
         * @summary Delete cart
         * @param {CartsApiCartsControllerDeleteCartV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartsControllerDeleteCartV1(requestParameters: CartsApiCartsControllerDeleteCartV1Request, options?: RawAxiosRequestConfig): AxiosPromise<DeleteResponseDto> {
            return localVarFp.cartsControllerDeleteCartV1(requestParameters.cartId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get cart details including items and status
         * @summary Get cart by ID
         * @param {CartsApiCartsControllerGetCartV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartsControllerGetCartV1(requestParameters: CartsApiCartsControllerGetCartV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UpdateCartResponseDto> {
            return localVarFp.cartsControllerGetCartV1(requestParameters.cartId, options).then((request) => request(axios, basePath));
        },
        /**
         * Set cart items to exact quantities. This will overwrite existing cart contents.
         * @summary Update cart items (overwrite)
         * @param {CartsApiCartsControllerUpdateCartItemsV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartsControllerUpdateCartItemsV1(requestParameters: CartsApiCartsControllerUpdateCartItemsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UpdateCartResponseDto> {
            return localVarFp.cartsControllerUpdateCartItemsV1(requestParameters.cartId, requestParameters.updateCartItemDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Update quantity of a specific item in cart
         * @summary Update item quantity
         * @param {CartsApiCartsControllerUpdateItemQuantityV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartsControllerUpdateItemQuantityV1(requestParameters: CartsApiCartsControllerUpdateItemQuantityV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UpdateCartResponseDto> {
            return localVarFp.cartsControllerUpdateItemQuantityV1(requestParameters.cartId, requestParameters.productId, requestParameters.updateQuantityDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cartsControllerAddItemsToCartV1 operation in CartsApi.
 * @export
 * @interface CartsApiCartsControllerAddItemsToCartV1Request
 */
export interface CartsApiCartsControllerAddItemsToCartV1Request {
    /**
     * 
     * @type {string}
     * @memberof CartsApiCartsControllerAddItemsToCartV1
     */
    readonly cartId: string

    /**
     * 
     * @type {UpdateCartItemDto}
     * @memberof CartsApiCartsControllerAddItemsToCartV1
     */
    readonly updateCartItemDto: UpdateCartItemDto
}

/**
 * Request parameters for cartsControllerDeleteCartV1 operation in CartsApi.
 * @export
 * @interface CartsApiCartsControllerDeleteCartV1Request
 */
export interface CartsApiCartsControllerDeleteCartV1Request {
    /**
     * 
     * @type {string}
     * @memberof CartsApiCartsControllerDeleteCartV1
     */
    readonly cartId: string
}

/**
 * Request parameters for cartsControllerGetCartV1 operation in CartsApi.
 * @export
 * @interface CartsApiCartsControllerGetCartV1Request
 */
export interface CartsApiCartsControllerGetCartV1Request {
    /**
     * 
     * @type {string}
     * @memberof CartsApiCartsControllerGetCartV1
     */
    readonly cartId: string
}

/**
 * Request parameters for cartsControllerUpdateCartItemsV1 operation in CartsApi.
 * @export
 * @interface CartsApiCartsControllerUpdateCartItemsV1Request
 */
export interface CartsApiCartsControllerUpdateCartItemsV1Request {
    /**
     * 
     * @type {string}
     * @memberof CartsApiCartsControllerUpdateCartItemsV1
     */
    readonly cartId: string

    /**
     * 
     * @type {UpdateCartItemDto}
     * @memberof CartsApiCartsControllerUpdateCartItemsV1
     */
    readonly updateCartItemDto: UpdateCartItemDto
}

/**
 * Request parameters for cartsControllerUpdateItemQuantityV1 operation in CartsApi.
 * @export
 * @interface CartsApiCartsControllerUpdateItemQuantityV1Request
 */
export interface CartsApiCartsControllerUpdateItemQuantityV1Request {
    /**
     * 
     * @type {string}
     * @memberof CartsApiCartsControllerUpdateItemQuantityV1
     */
    readonly cartId: string

    /**
     * 
     * @type {string}
     * @memberof CartsApiCartsControllerUpdateItemQuantityV1
     */
    readonly productId: string

    /**
     * 
     * @type {UpdateQuantityDto}
     * @memberof CartsApiCartsControllerUpdateItemQuantityV1
     */
    readonly updateQuantityDto: UpdateQuantityDto
}

/**
 * CartsApi - object-oriented interface
 * @export
 * @class CartsApi
 * @extends {BaseAPI}
 */
export class CartsApi extends BaseAPI {
    /**
     * Add items to cart. If item already exists, quantity will be added to existing quantity.
     * @summary Add items to cart (incremental)
     * @param {CartsApiCartsControllerAddItemsToCartV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsApi
     */
    public cartsControllerAddItemsToCartV1(requestParameters: CartsApiCartsControllerAddItemsToCartV1Request, options?: RawAxiosRequestConfig) {
        return CartsApiFp(this.configuration).cartsControllerAddItemsToCartV1(requestParameters.cartId, requestParameters.updateCartItemDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new shopping cart with default expiry time
     * @summary Create a new cart
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsApi
     */
    public cartsControllerCreateCartV1(options?: RawAxiosRequestConfig) {
        return CartsApiFp(this.configuration).cartsControllerCreateCartV1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete cart and release all reserved stock
     * @summary Delete cart
     * @param {CartsApiCartsControllerDeleteCartV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsApi
     */
    public cartsControllerDeleteCartV1(requestParameters: CartsApiCartsControllerDeleteCartV1Request, options?: RawAxiosRequestConfig) {
        return CartsApiFp(this.configuration).cartsControllerDeleteCartV1(requestParameters.cartId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get cart details including items and status
     * @summary Get cart by ID
     * @param {CartsApiCartsControllerGetCartV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsApi
     */
    public cartsControllerGetCartV1(requestParameters: CartsApiCartsControllerGetCartV1Request, options?: RawAxiosRequestConfig) {
        return CartsApiFp(this.configuration).cartsControllerGetCartV1(requestParameters.cartId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set cart items to exact quantities. This will overwrite existing cart contents.
     * @summary Update cart items (overwrite)
     * @param {CartsApiCartsControllerUpdateCartItemsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsApi
     */
    public cartsControllerUpdateCartItemsV1(requestParameters: CartsApiCartsControllerUpdateCartItemsV1Request, options?: RawAxiosRequestConfig) {
        return CartsApiFp(this.configuration).cartsControllerUpdateCartItemsV1(requestParameters.cartId, requestParameters.updateCartItemDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update quantity of a specific item in cart
     * @summary Update item quantity
     * @param {CartsApiCartsControllerUpdateItemQuantityV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsApi
     */
    public cartsControllerUpdateItemQuantityV1(requestParameters: CartsApiCartsControllerUpdateItemQuantityV1Request, options?: RawAxiosRequestConfig) {
        return CartsApiFp(this.configuration).cartsControllerUpdateItemQuantityV1(requestParameters.cartId, requestParameters.productId, requestParameters.updateQuantityDto, options).then((request) => request(this.axios, this.basePath));
    }
}

