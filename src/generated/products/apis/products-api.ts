/* tslint:disable */
/* eslint-disable */
/**
 * Final POS API
 * REST API for products and shopping carts with partial success support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { BatchCreateProductsDto } from '../models';
// @ts-ignore
import type { BatchCreateProductsResponseDto } from '../models';
// @ts-ignore
import type { BatchReservationRequestDto } from '../models';
// @ts-ignore
import type { BatchReservationResponseDto } from '../models';
// @ts-ignore
import type { CreateProductDto } from '../models';
// @ts-ignore
import type { DeleteResponseDto } from '../models';
// @ts-ignore
import type { PaginatedResponseDto } from '../models';
// @ts-ignore
import type { SimpleSuccessResponseDto } from '../models';
// @ts-ignore
import type { SingleResourceResponseDto } from '../models';
// @ts-ignore
import type { UpdateProductDto } from '../models';
/**
 * ProductsApi - axios parameter creator
 * @export
 */
export const ProductsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adjust stock quantity for a single product. Use positive values to increase, negative to decrease. This is a relative change operation.
         * @summary Adjust single product stock (Cart quantity adjustment)
         * @param {string} id 
         * @param {string} delta 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsControllerAdjustStockV1: async (id: string, delta: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productsControllerAdjustStockV1', 'id', id)
            // verify required parameter 'delta' is not null or undefined
            assertParamExists('productsControllerAdjustStockV1', 'delta', delta)
            const localVarPath = `/api/v1/products/{id}/adjust-stock/{delta}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"delta"}}`, encodeURIComponent(String(delta)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create multiple products at once with partial success support.
         * @summary Create multiple products in batch
         * @param {BatchCreateProductsDto} batchCreateProductsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsControllerBatchCreateV1: async (batchCreateProductsDto: BatchCreateProductsDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'batchCreateProductsDto' is not null or undefined
            assertParamExists('productsControllerBatchCreateV1', 'batchCreateProductsDto', batchCreateProductsDto)
            const localVarPath = `/api/v1/products/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(batchCreateProductsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reserve/adjust stock for multiple products in cart operations.  Use cases: 1. Add multiple products to cart 2. Modify existing cart items  Modes: - All-or-nothing: All reservations succeed or fail together - Partial acceptance: Some reservations may fail while others succeed
         * @summary Batch stock reservation (Cart operations)
         * @param {BatchReservationRequestDto} batchReservationRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsControllerBatchReservationV1: async (batchReservationRequestDto: BatchReservationRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'batchReservationRequestDto' is not null or undefined
            assertParamExists('productsControllerBatchReservationV1', 'batchReservationRequestDto', batchReservationRequestDto)
            const localVarPath = `/api/v1/products/reservations/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(batchReservationRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a single product with validation and error handling
         * @summary Create a single product
         * @param {CreateProductDto} createProductDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsControllerCreateV1: async (createProductDto: CreateProductDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProductDto' is not null or undefined
            assertParamExists('productsControllerCreateV1', 'createProductDto', createProductDto)
            const localVarPath = `/api/v1/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProductDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a paginated list of products with optional category filtering
         * @summary List products with pagination and filtering
         * @param {string} [category] Filter by product category
         * @param {number} [page] Page number (starts from 1)
         * @param {number} [limit] Number of items per page (max 100)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsControllerFindAllV1: async (category?: string, page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a product by its ID or name. The system will first try to find by ID, then by name if not found.
         * @summary Get product by id or name
         * @param {string} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsControllerFindOneV1: async (identifier: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            assertParamExists('productsControllerFindOneV1', 'identifier', identifier)
            const localVarPath = `/api/v1/products/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all unique product categories
         * @summary Get all product categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsControllerGetCategoriesV1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/products/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete product and clean up any cart references. Returns 404 if product not found.
         * @summary Delete product by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsControllerRemoveV1: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productsControllerRemoveV1', 'id', id)
            const localVarPath = `/api/v1/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update product fields. All provided fields will be updated.
         * @summary Update product by id
         * @param {string} id 
         * @param {UpdateProductDto} updateProductDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsControllerUpdateV1: async (id: string, updateProductDto: UpdateProductDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productsControllerUpdateV1', 'id', id)
            // verify required parameter 'updateProductDto' is not null or undefined
            assertParamExists('productsControllerUpdateV1', 'updateProductDto', updateProductDto)
            const localVarPath = `/api/v1/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProductDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsApi - functional programming interface
 * @export
 */
export const ProductsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsApiAxiosParamCreator(configuration)
    return {
        /**
         * Adjust stock quantity for a single product. Use positive values to increase, negative to decrease. This is a relative change operation.
         * @summary Adjust single product stock (Cart quantity adjustment)
         * @param {string} id 
         * @param {string} delta 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsControllerAdjustStockV1(id: string, delta: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleResourceResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsControllerAdjustStockV1(id, delta, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.productsControllerAdjustStockV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create multiple products at once with partial success support.
         * @summary Create multiple products in batch
         * @param {BatchCreateProductsDto} batchCreateProductsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsControllerBatchCreateV1(batchCreateProductsDto: BatchCreateProductsDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchCreateProductsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsControllerBatchCreateV1(batchCreateProductsDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.productsControllerBatchCreateV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Reserve/adjust stock for multiple products in cart operations.  Use cases: 1. Add multiple products to cart 2. Modify existing cart items  Modes: - All-or-nothing: All reservations succeed or fail together - Partial acceptance: Some reservations may fail while others succeed
         * @summary Batch stock reservation (Cart operations)
         * @param {BatchReservationRequestDto} batchReservationRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsControllerBatchReservationV1(batchReservationRequestDto: BatchReservationRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchReservationResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsControllerBatchReservationV1(batchReservationRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.productsControllerBatchReservationV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a single product with validation and error handling
         * @summary Create a single product
         * @param {CreateProductDto} createProductDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsControllerCreateV1(createProductDto: CreateProductDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleResourceResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsControllerCreateV1(createProductDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.productsControllerCreateV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a paginated list of products with optional category filtering
         * @summary List products with pagination and filtering
         * @param {string} [category] Filter by product category
         * @param {number} [page] Page number (starts from 1)
         * @param {number} [limit] Number of items per page (max 100)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsControllerFindAllV1(category?: string, page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsControllerFindAllV1(category, page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.productsControllerFindAllV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a product by its ID or name. The system will first try to find by ID, then by name if not found.
         * @summary Get product by id or name
         * @param {string} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsControllerFindOneV1(identifier: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleResourceResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsControllerFindOneV1(identifier, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.productsControllerFindOneV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a list of all unique product categories
         * @summary Get all product categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsControllerGetCategoriesV1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SimpleSuccessResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsControllerGetCategoriesV1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.productsControllerGetCategoriesV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete product and clean up any cart references. Returns 404 if product not found.
         * @summary Delete product by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsControllerRemoveV1(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsControllerRemoveV1(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.productsControllerRemoveV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update product fields. All provided fields will be updated.
         * @summary Update product by id
         * @param {string} id 
         * @param {UpdateProductDto} updateProductDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsControllerUpdateV1(id: string, updateProductDto: UpdateProductDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleResourceResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsControllerUpdateV1(id, updateProductDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.productsControllerUpdateV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProductsApi - factory interface
 * @export
 */
export const ProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsApiFp(configuration)
    return {
        /**
         * Adjust stock quantity for a single product. Use positive values to increase, negative to decrease. This is a relative change operation.
         * @summary Adjust single product stock (Cart quantity adjustment)
         * @param {ProductsApiProductsControllerAdjustStockV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsControllerAdjustStockV1(requestParameters: ProductsApiProductsControllerAdjustStockV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SingleResourceResponseDto> {
            return localVarFp.productsControllerAdjustStockV1(requestParameters.id, requestParameters.delta, options).then((request) => request(axios, basePath));
        },
        /**
         * Create multiple products at once with partial success support.
         * @summary Create multiple products in batch
         * @param {ProductsApiProductsControllerBatchCreateV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsControllerBatchCreateV1(requestParameters: ProductsApiProductsControllerBatchCreateV1Request, options?: RawAxiosRequestConfig): AxiosPromise<BatchCreateProductsResponseDto> {
            return localVarFp.productsControllerBatchCreateV1(requestParameters.batchCreateProductsDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Reserve/adjust stock for multiple products in cart operations.  Use cases: 1. Add multiple products to cart 2. Modify existing cart items  Modes: - All-or-nothing: All reservations succeed or fail together - Partial acceptance: Some reservations may fail while others succeed
         * @summary Batch stock reservation (Cart operations)
         * @param {ProductsApiProductsControllerBatchReservationV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsControllerBatchReservationV1(requestParameters: ProductsApiProductsControllerBatchReservationV1Request, options?: RawAxiosRequestConfig): AxiosPromise<BatchReservationResponseDto> {
            return localVarFp.productsControllerBatchReservationV1(requestParameters.batchReservationRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a single product with validation and error handling
         * @summary Create a single product
         * @param {ProductsApiProductsControllerCreateV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsControllerCreateV1(requestParameters: ProductsApiProductsControllerCreateV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SingleResourceResponseDto> {
            return localVarFp.productsControllerCreateV1(requestParameters.createProductDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a paginated list of products with optional category filtering
         * @summary List products with pagination and filtering
         * @param {ProductsApiProductsControllerFindAllV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsControllerFindAllV1(requestParameters: ProductsApiProductsControllerFindAllV1Request = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedResponseDto> {
            return localVarFp.productsControllerFindAllV1(requestParameters.category, requestParameters.page, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a product by its ID or name. The system will first try to find by ID, then by name if not found.
         * @summary Get product by id or name
         * @param {ProductsApiProductsControllerFindOneV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsControllerFindOneV1(requestParameters: ProductsApiProductsControllerFindOneV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SingleResourceResponseDto> {
            return localVarFp.productsControllerFindOneV1(requestParameters.identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all unique product categories
         * @summary Get all product categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsControllerGetCategoriesV1(options?: RawAxiosRequestConfig): AxiosPromise<SimpleSuccessResponseDto> {
            return localVarFp.productsControllerGetCategoriesV1(options).then((request) => request(axios, basePath));
        },
        /**
         * Delete product and clean up any cart references. Returns 404 if product not found.
         * @summary Delete product by id
         * @param {ProductsApiProductsControllerRemoveV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsControllerRemoveV1(requestParameters: ProductsApiProductsControllerRemoveV1Request, options?: RawAxiosRequestConfig): AxiosPromise<DeleteResponseDto> {
            return localVarFp.productsControllerRemoveV1(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update product fields. All provided fields will be updated.
         * @summary Update product by id
         * @param {ProductsApiProductsControllerUpdateV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsControllerUpdateV1(requestParameters: ProductsApiProductsControllerUpdateV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SingleResourceResponseDto> {
            return localVarFp.productsControllerUpdateV1(requestParameters.id, requestParameters.updateProductDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for productsControllerAdjustStockV1 operation in ProductsApi.
 * @export
 * @interface ProductsApiProductsControllerAdjustStockV1Request
 */
export interface ProductsApiProductsControllerAdjustStockV1Request {
    /**
     * 
     * @type {string}
     * @memberof ProductsApiProductsControllerAdjustStockV1
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof ProductsApiProductsControllerAdjustStockV1
     */
    readonly delta: string
}

/**
 * Request parameters for productsControllerBatchCreateV1 operation in ProductsApi.
 * @export
 * @interface ProductsApiProductsControllerBatchCreateV1Request
 */
export interface ProductsApiProductsControllerBatchCreateV1Request {
    /**
     * 
     * @type {BatchCreateProductsDto}
     * @memberof ProductsApiProductsControllerBatchCreateV1
     */
    readonly batchCreateProductsDto: BatchCreateProductsDto
}

/**
 * Request parameters for productsControllerBatchReservationV1 operation in ProductsApi.
 * @export
 * @interface ProductsApiProductsControllerBatchReservationV1Request
 */
export interface ProductsApiProductsControllerBatchReservationV1Request {
    /**
     * 
     * @type {BatchReservationRequestDto}
     * @memberof ProductsApiProductsControllerBatchReservationV1
     */
    readonly batchReservationRequestDto: BatchReservationRequestDto
}

/**
 * Request parameters for productsControllerCreateV1 operation in ProductsApi.
 * @export
 * @interface ProductsApiProductsControllerCreateV1Request
 */
export interface ProductsApiProductsControllerCreateV1Request {
    /**
     * 
     * @type {CreateProductDto}
     * @memberof ProductsApiProductsControllerCreateV1
     */
    readonly createProductDto: CreateProductDto
}

/**
 * Request parameters for productsControllerFindAllV1 operation in ProductsApi.
 * @export
 * @interface ProductsApiProductsControllerFindAllV1Request
 */
export interface ProductsApiProductsControllerFindAllV1Request {
    /**
     * Filter by product category
     * @type {string}
     * @memberof ProductsApiProductsControllerFindAllV1
     */
    readonly category?: string

    /**
     * Page number (starts from 1)
     * @type {number}
     * @memberof ProductsApiProductsControllerFindAllV1
     */
    readonly page?: number

    /**
     * Number of items per page (max 100)
     * @type {number}
     * @memberof ProductsApiProductsControllerFindAllV1
     */
    readonly limit?: number
}

/**
 * Request parameters for productsControllerFindOneV1 operation in ProductsApi.
 * @export
 * @interface ProductsApiProductsControllerFindOneV1Request
 */
export interface ProductsApiProductsControllerFindOneV1Request {
    /**
     * 
     * @type {string}
     * @memberof ProductsApiProductsControllerFindOneV1
     */
    readonly identifier: string
}

/**
 * Request parameters for productsControllerRemoveV1 operation in ProductsApi.
 * @export
 * @interface ProductsApiProductsControllerRemoveV1Request
 */
export interface ProductsApiProductsControllerRemoveV1Request {
    /**
     * 
     * @type {string}
     * @memberof ProductsApiProductsControllerRemoveV1
     */
    readonly id: string
}

/**
 * Request parameters for productsControllerUpdateV1 operation in ProductsApi.
 * @export
 * @interface ProductsApiProductsControllerUpdateV1Request
 */
export interface ProductsApiProductsControllerUpdateV1Request {
    /**
     * 
     * @type {string}
     * @memberof ProductsApiProductsControllerUpdateV1
     */
    readonly id: string

    /**
     * 
     * @type {UpdateProductDto}
     * @memberof ProductsApiProductsControllerUpdateV1
     */
    readonly updateProductDto: UpdateProductDto
}

/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export class ProductsApi extends BaseAPI {
    /**
     * Adjust stock quantity for a single product. Use positive values to increase, negative to decrease. This is a relative change operation.
     * @summary Adjust single product stock (Cart quantity adjustment)
     * @param {ProductsApiProductsControllerAdjustStockV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsControllerAdjustStockV1(requestParameters: ProductsApiProductsControllerAdjustStockV1Request, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsControllerAdjustStockV1(requestParameters.id, requestParameters.delta, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create multiple products at once with partial success support.
     * @summary Create multiple products in batch
     * @param {ProductsApiProductsControllerBatchCreateV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsControllerBatchCreateV1(requestParameters: ProductsApiProductsControllerBatchCreateV1Request, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsControllerBatchCreateV1(requestParameters.batchCreateProductsDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Reserve/adjust stock for multiple products in cart operations.  Use cases: 1. Add multiple products to cart 2. Modify existing cart items  Modes: - All-or-nothing: All reservations succeed or fail together - Partial acceptance: Some reservations may fail while others succeed
     * @summary Batch stock reservation (Cart operations)
     * @param {ProductsApiProductsControllerBatchReservationV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsControllerBatchReservationV1(requestParameters: ProductsApiProductsControllerBatchReservationV1Request, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsControllerBatchReservationV1(requestParameters.batchReservationRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a single product with validation and error handling
     * @summary Create a single product
     * @param {ProductsApiProductsControllerCreateV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsControllerCreateV1(requestParameters: ProductsApiProductsControllerCreateV1Request, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsControllerCreateV1(requestParameters.createProductDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a paginated list of products with optional category filtering
     * @summary List products with pagination and filtering
     * @param {ProductsApiProductsControllerFindAllV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsControllerFindAllV1(requestParameters: ProductsApiProductsControllerFindAllV1Request = {}, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsControllerFindAllV1(requestParameters.category, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a product by its ID or name. The system will first try to find by ID, then by name if not found.
     * @summary Get product by id or name
     * @param {ProductsApiProductsControllerFindOneV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsControllerFindOneV1(requestParameters: ProductsApiProductsControllerFindOneV1Request, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsControllerFindOneV1(requestParameters.identifier, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all unique product categories
     * @summary Get all product categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsControllerGetCategoriesV1(options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsControllerGetCategoriesV1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete product and clean up any cart references. Returns 404 if product not found.
     * @summary Delete product by id
     * @param {ProductsApiProductsControllerRemoveV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsControllerRemoveV1(requestParameters: ProductsApiProductsControllerRemoveV1Request, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsControllerRemoveV1(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update product fields. All provided fields will be updated.
     * @summary Update product by id
     * @param {ProductsApiProductsControllerUpdateV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsControllerUpdateV1(requestParameters: ProductsApiProductsControllerUpdateV1Request, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsControllerUpdateV1(requestParameters.id, requestParameters.updateProductDto, options).then((request) => request(this.axios, this.basePath));
    }
}

