/* tslint:disable */
/* eslint-disable */
/**
 * Products API
 * Product Inventory Management API Service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface BatchReservationRequest
 */
export interface BatchReservationRequest {
    /**
     * List of products to adjust
     * @type {Array<BatchReservationRequestItemsInner>}
     * @memberof BatchReservationRequest
     */
    'items': Array<BatchReservationRequestItemsInner>;
    /**
     * Enable transactional operation (all success or all failure)
     * @type {boolean}
     * @memberof BatchReservationRequest
     */
    'allOrNothing'?: boolean;
}
/**
 * 
 * @export
 * @interface BatchReservationRequestItemsInner
 */
export interface BatchReservationRequestItemsInner {
    /**
     * Product ID
     * @type {string}
     * @memberof BatchReservationRequestItemsInner
     */
    'productId': string;
    /**
     * Stock adjustment quantity (positive for increase, negative for decrease)
     * @type {number}
     * @memberof BatchReservationRequestItemsInner
     */
    'qtyDelta': number;
    /**
     * Operation ID for tracking
     * @type {string}
     * @memberof BatchReservationRequestItemsInner
     */
    'opId'?: string;
}
/**
 * 
 * @export
 * @interface BatchStockAdjustmentResponse
 */
export interface BatchStockAdjustmentResponse {
    /**
     * Operation success status
     * @type {boolean}
     * @memberof BatchStockAdjustmentResponse
     */
    'success'?: boolean;
    /**
     * Individual product adjustment results
     * @type {Array<StockAdjustmentResult>}
     * @memberof BatchStockAdjustmentResponse
     */
    'results'?: Array<StockAdjustmentResult>;
    /**
     * Response message
     * @type {string}
     * @memberof BatchStockAdjustmentResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface BatchStockAdjustmentResult
 */
export interface BatchStockAdjustmentResult {
    /**
     * Overall operation success status
     * @type {boolean}
     * @memberof BatchStockAdjustmentResult
     */
    'success': boolean;
    /**
     * Individual product adjustment results
     * @type {Array<StockAdjustmentResult>}
     * @memberof BatchStockAdjustmentResult
     */
    'results': Array<StockAdjustmentResult>;
    /**
     * Overall error messages
     * @type {Array<string>}
     * @memberof BatchStockAdjustmentResult
     */
    'errors'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * Operation success status
     * @type {boolean}
     * @memberof ErrorResponse
     */
    'success': boolean;
    /**
     * Error message
     * @type {string}
     * @memberof ErrorResponse
     */
    'message': string;
    /**
     * Error type
     * @type {string}
     * @memberof ErrorResponse
     */
    'error'?: string;
    /**
     * HTTP status code
     * @type {number}
     * @memberof ErrorResponse
     */
    'statusCode'?: number;
}
/**
 * 
 * @export
 * @interface StockAdjustmentResponse
 */
export interface StockAdjustmentResponse {
    /**
     * Operation success status
     * @type {boolean}
     * @memberof StockAdjustmentResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {StockAdjustmentResult}
     * @memberof StockAdjustmentResponse
     */
    'data'?: StockAdjustmentResult;
    /**
     * Response message
     * @type {string}
     * @memberof StockAdjustmentResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface StockAdjustmentResult
 */
export interface StockAdjustmentResult {
    /**
     * Operation success status
     * @type {boolean}
     * @memberof StockAdjustmentResult
     */
    'success': boolean;
    /**
     * Product ID
     * @type {string}
     * @memberof StockAdjustmentResult
     */
    'productId': string;
    /**
     * Updated stock quantity
     * @type {number}
     * @memberof StockAdjustmentResult
     */
    'newStock': number;
    /**
     * Product version (optimistic lock)
     * @type {number}
     * @memberof StockAdjustmentResult
     */
    'version'?: number;
    /**
     * Error message (only returned on failure)
     * @type {string}
     * @memberof StockAdjustmentResult
     */
    'error'?: string;
}

/**
 * ProductsApi - axios parameter creator
 * @export
 */
export const ProductsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adjust the stock quantity of a specific product
         * @summary Adjust Single Product Stock
         * @param {string} id Product ID
         * @param {string} delta Stock adjustment quantity (positive for increase, negative for decrease)
         * @param {string} [opId] Operation ID for tracking
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsControllerAdjustStockV1: async (id: string, delta: string, opId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productsControllerAdjustStockV1', 'id', id)
            // verify required parameter 'delta' is not null or undefined
            assertParamExists('productsControllerAdjustStockV1', 'delta', delta)
            const localVarPath = `/products/{id}/stock/adjust`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (delta !== undefined) {
                localVarQueryParameter['delta'] = delta;
            }

            if (opId !== undefined) {
                localVarQueryParameter['opId'] = opId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Batch adjust stock quantities for multiple products with transaction support
         * @summary Batch Adjust Product Stock
         * @param {BatchReservationRequest} batchReservationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsControllerBatchReservationV1: async (batchReservationRequest: BatchReservationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'batchReservationRequest' is not null or undefined
            assertParamExists('productsControllerBatchReservationV1', 'batchReservationRequest', batchReservationRequest)
            const localVarPath = `/products/batch-reservation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(batchReservationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsApi - functional programming interface
 * @export
 */
export const ProductsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsApiAxiosParamCreator(configuration)
    return {
        /**
         * Adjust the stock quantity of a specific product
         * @summary Adjust Single Product Stock
         * @param {string} id Product ID
         * @param {string} delta Stock adjustment quantity (positive for increase, negative for decrease)
         * @param {string} [opId] Operation ID for tracking
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsControllerAdjustStockV1(id: string, delta: string, opId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StockAdjustmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsControllerAdjustStockV1(id, delta, opId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.productsControllerAdjustStockV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Batch adjust stock quantities for multiple products with transaction support
         * @summary Batch Adjust Product Stock
         * @param {BatchReservationRequest} batchReservationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsControllerBatchReservationV1(batchReservationRequest: BatchReservationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchStockAdjustmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsControllerBatchReservationV1(batchReservationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.productsControllerBatchReservationV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProductsApi - factory interface
 * @export
 */
export const ProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsApiFp(configuration)
    return {
        /**
         * Adjust the stock quantity of a specific product
         * @summary Adjust Single Product Stock
         * @param {string} id Product ID
         * @param {string} delta Stock adjustment quantity (positive for increase, negative for decrease)
         * @param {string} [opId] Operation ID for tracking
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsControllerAdjustStockV1(id: string, delta: string, opId?: string, options?: any): AxiosPromise<StockAdjustmentResponse> {
            return localVarFp.productsControllerAdjustStockV1(id, delta, opId, options).then((request) => request(axios, basePath));
        },
        /**
         * Batch adjust stock quantities for multiple products with transaction support
         * @summary Batch Adjust Product Stock
         * @param {BatchReservationRequest} batchReservationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsControllerBatchReservationV1(batchReservationRequest: BatchReservationRequest, options?: any): AxiosPromise<BatchStockAdjustmentResponse> {
            return localVarFp.productsControllerBatchReservationV1(batchReservationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export class ProductsApi extends BaseAPI {
    /**
     * Adjust the stock quantity of a specific product
     * @summary Adjust Single Product Stock
     * @param {string} id Product ID
     * @param {string} delta Stock adjustment quantity (positive for increase, negative for decrease)
     * @param {string} [opId] Operation ID for tracking
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsControllerAdjustStockV1(id: string, delta: string, opId?: string, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsControllerAdjustStockV1(id, delta, opId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Batch adjust stock quantities for multiple products with transaction support
     * @summary Batch Adjust Product Stock
     * @param {BatchReservationRequest} batchReservationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsControllerBatchReservationV1(batchReservationRequest: BatchReservationRequest, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsControllerBatchReservationV1(batchReservationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



